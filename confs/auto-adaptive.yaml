substitutions:
  update_interval_minutes: "10min"

globals:
  - id: heating_curve_offset_z1
    type: float
    restore_value: yes
    initial_value: '25.0'
  - id: heating_curve_offset_z2
    type: float
    restore_value: yes
    initial_value: '25.0'
  - id: cooling_curve_offset_z1
    type: float
    restore_value: yes
    initial_value: '19.0'
  - id: cooling_curve_offset_z2
    type: float
    restore_value: yes
    initial_value: '19.0'
  - id: heating_previous_temp_error_z1
    type: float
    restore_value: no 
    initial_value: '0.0'
  - id: heating_previous_temp_error_z2
    type: float
    restore_value: no 
    initial_value: '0.0'
  - id: cooling_previous_temp_error_z1
    type: float
    restore_value: no
    initial_value: '0.0'
  - id: cooling_previous_temp_error_z2
    type: float
    restore_value: no
    initial_value: '0.0'

number:
  # Slope settings
  - platform: template
    id: heating_slope
    name: ${heating_slope}
    optimistic: true
    restore_value: true
    initial_value: 0.8
    min_value: 0.2
    max_value: 2.5
    step: 0.1
  - platform: template
    id: cooling_slope
    name: ${cooling_slope}
    optimistic: true
    restore_value: true
    initial_value: 1.2
    min_value: 0.2
    max_value: 2.5
    step: 0.1
  # Safety limits
  - platform: template
    id: maximum_heating_flow_temp
    name: ${maximum_heating_flow_temp}
    unit_of_measurement: "°C"
    optimistic: true
    restore_value: true
    initial_value: 38.0
    min_value: 30.0
    max_value: 55.0
    step: 0.5
  - platform: template
    id: minimum_cooling_flow_temp
    name: ${minimum_cooling_flow_temp}
    unit_of_measurement: "°C"
    optimistic: true
    restore_value: true
    initial_value: 18.0
    min_value: 10.0
    max_value: 25.0
    step: 0.5
  - platform: template
    id: cooling_smart_start_temp
    unit_of_measurement: "°C"
    name: ${cooling_smart_start_temp}
    optimistic: true
    restore_value: true
    initial_value: 19.0
    min_value: 16.0
    max_value: 22.0
    step: 0.5
  # Temperature feedback via api
  - platform: template
    id: temperature_feedback
    unit_of_measurement: "°C"
    optimistic: true
    min_value: -50
    max_value: 100
    step: 0.1
    internal: true

# expose learned curve values
sensor:
  - platform: template
    name: ${heating_offset_sensor}
    id: heating_offset_sensor_z1
    lambda: 'return id(heating_curve_offset_z1);'
    unit_of_measurement: "°C"
    icon: "mdi:chart-line"
    update_interval: ${update_interval_minutes} 
  - platform: template
    name: ${heating_offset_sensor} z2
    id: heating_offset_sensor_z2
    lambda: 'return id(heating_curve_offset_z2);'
    unit_of_measurement: "°C"
    icon: "mdi:chart-line"
    update_interval: ${update_interval_minutes}
  - platform: template
    name: ${cooling_offset_sensor}
    id: cooling_offset_sensor_z1
    lambda: 'return id(cooling_curve_offset_z1);'
    unit_of_measurement: "°C"
    icon: "mdi:chart-line-variant"
    update_interval: ${update_interval_minutes}
  - platform: template
    name: ${cooling_offset_sensor} z2
    id: cooling_offset_sensor_z2
    lambda: 'return id(cooling_curve_offset_z2);'
    unit_of_measurement: "°C"
    icon: "mdi:chart-line-variant"
    update_interval: ${update_interval_minutes}

select:
  - platform: template
    id: temperature_feedback_source
    name: ${temperature_feedback_source}
    optimistic: true
    restore_value: true
    options:
      - "${temperature_feedback_option_room}"
      - "${temperature_feedback_option_api}"
    initial_option: "${temperature_feedback_option_room}"
  - platform: template
    id: heating_system_type
    name: ${heating_system_type}
    optimistic: true
    restore_value: true
    options:
      - "${heating_system_type_option_ufh}"
      - "${heating_system_type_option_ufh_rad}"
      - "${heating_system_type_option_rad}"
    initial_option: "${heating_system_type_option_ufh}"

switch:
  - platform: template
    name: ${auto_adaptive_control_enabled}
    id: auto_adaptive_control_enabled
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    # lambda: |-
    #   auto& status = id(ecodan_instance).get_status();
    #   if (status.HeatingCoolingMode == esphome::ecodan::Status::HpMode::HEAT_FLOW_TEMP 
    #       || status.HeatingCoolingMode == esphome::ecodan::Status::HpMode::COOL_FLOW_TEMP) {
    #     return true;
    #   }
    #   return false;

# button:
#   - platform: template
#     name: 'Auto-Adaptive: Run'
#     id: run_auto_adaptive_cycle
#     icon: "mdi:play-circle"
#     on_press:
#       then:
#         - script.execute: auto_adaptive_loop

interval:
  - interval: ${update_interval_minutes}
    then:
      - script.execute: auto_adaptive_loop

script:
  - id: auto_adaptive_loop
    # avoid multiple queues of this script, "restart" if current one needs to be cancelled
    mode: single
    then:
      - lambda: |-
          if (!id(auto_adaptive_control_enabled).state) return;
          auto& status = id(ecodan_instance).get_status();
          if ((status.HeatingCoolingMode != esphome::ecodan::Status::HpMode::HEAT_FLOW_TEMP && status.HeatingCoolingMode != esphome::ecodan::Status::HpMode::COOL_FLOW_TEMP) &&
              (status.HeatingCoolingModeZone2 != esphome::ecodan::Status::HpMode::HEAT_FLOW_TEMP && status.HeatingCoolingModeZone2 != esphome::ecodan::Status::HpMode::COOL_FLOW_TEMP)) {
            ESP_LOGD("auto_adaptive", "Not in fixed flow mode. Exiting.");
            return;
          }
          if (isnan(id(hp_feed_temp).state) || isnan(id(outside_temp).state)) {
            ESP_LOGW("auto_adaptive", "Sensor data unavailable. Exiting.");
            return;
          }
          if (id(status_short_cycle_lockout).state || status.DefrostActive) {
            ESP_LOGI("auto_adaptive", "Lockout or Defrost is active. Exiting.");
            return;
          }

          ESP_LOGD("auto_adaptive", "Starting auto-adaptive cycle, z2 independent: %d, has_cooling: %d", status.has_independent_z2(), status.has_cooling());

          float* heating_offsets[] = {&id(heating_curve_offset_z1), &id(heating_curve_offset_z2)};
          float* cooling_offsets[] = {&id(cooling_curve_offset_z1), &id(cooling_curve_offset_z2)};
          float* heating_prev_errors[] = {&id(heating_previous_temp_error_z1), &id(heating_previous_temp_error_z2)};
          float* cooling_prev_errors[] = {&id(cooling_previous_temp_error_z1), &id(cooling_previous_temp_error_z2)};

          const float SATURATION_MARGIN = 2.0f;
          float actual_outside_temp = id(outside_temp).state;

          float calculated_flows_heat[2] = {0.0f, 0.0f};
          float calculated_flows_cool[2] = {100.0f, 100.0f};

          float learning_rate;
          float error_margin_positive;
          float error_margin_negative;
          auto heating_type_index = id(heating_system_type).active_index().value_or(0);
          if (heating_type_index == 0) { // UFH
            learning_rate = 0.03f; error_margin_positive = 0.4f; error_margin_negative = -0.3f;
          } else if (heating_type_index == 1) { // UFH + Radiators
            learning_rate = 0.04f; error_margin_positive = 0.3f; error_margin_negative = -0.2f;
          } else { // Radiators
            learning_rate = 0.05f; error_margin_positive = 0.3f; error_margin_negative = -0.2f;
          }

          esphome::ecodan::Zone all_zones[] = {esphome::ecodan::Zone::ZONE_1, esphome::ecodan::Zone::ZONE_2};
          for (std::size_t i = 0; i < std::size(all_zones); i++) {
              auto zone = all_zones[i];
              
              bool is_heating_active = status.is_auto_adaptive_heating(zone);
              bool is_cooling_active = status.has_cooling() && status.is_auto_adaptive_cooling(zone);
                  
              if (!is_heating_active && !is_cooling_active) continue;

              // --- Get Data for the active zone ---
              float room_temp = (i == 0) ? status.Zone1RoomTemperature : status.Zone2RoomTemperature;
              float room_target_temp = (i == 0) ? status.Zone1SetTemperature : status.Zone2SetTemperature;
              float requested_flow_temp = (i == 0) ? status.Zone1FlowTemperatureSetPoint : status.Zone2FlowTemperatureSetPoint;
              float actual_flow_temp = status.has_independent_z2() ? ((i == 0) ? status.Z1FeedTemperature : status.Z2FeedTemperature) : id(hp_feed_temp).state;
              
              if (id(temperature_feedback_source).active_index().value_or(0) == 1) {
                  room_temp = id(temperature_feedback).state;
              }
              if (isnan(room_temp) || isnan(room_target_temp) || isnan(requested_flow_temp) || isnan(actual_flow_temp)) continue;
              
              ESP_LOGD("auto_adaptive", "Processing Zone %d: Room=%.1f, Target=%.1f, Outside=%.1f", (i + 1), room_temp, room_target_temp, actual_outside_temp);

              if (is_heating_active) {
                  float& offset = *heating_offsets[i];
                  float& prev_error = *heating_prev_errors[i];
                  
                  float calculated_flow = (20.0f - actual_outside_temp) * id(heating_slope).state + offset;
                  if (calculated_flow > id(maximum_heating_flow_temp).state) {
                    calculated_flow = id(maximum_heating_flow_temp).state;
                    ESP_LOGW("auto_adaptive", "Z%d HEATING: Flow limited to %.1f°C (Safety Limit)", (i + 1), calculated_flow);
                  }

                  bool is_saturated = (requested_flow_temp - actual_flow_temp) > SATURATION_MARGIN;
                  if (is_saturated) {
                      ESP_LOGW("auto_adaptive", "Z%d HEATING: HP Saturated (Req: %.1f, Act: %.1f). Learning paused.", (i + 1), requested_flow_temp, actual_flow_temp);
                  } else {
                    float error = room_target_temp - room_temp;
                    if (error > error_margin_positive && error >= prev_error) {
                      float old_offset = offset;
                      offset += learning_rate;
                      ESP_LOGI("auto_adaptive", "Z%d HEATING: Room too cold (err: %.2f). Offset increased from %.2f to %.2f", (i + 1), error, old_offset, offset);
                    } else if (error < error_margin_negative) {
                      float old_offset = offset;
                      offset -= learning_rate;
                      ESP_LOGI("auto_adaptive", "Z%d HEATING: Room too warm (err: %.2f). Offset decreased from %.2f to %.2f", (i + 1), error, old_offset, offset);
                    }
                    prev_error = error;
                  }
                  
                  calculated_flows_heat[i] = round(calculated_flow * 2) / 2.0f;
              }
              
              if (is_cooling_active) {
                  float& offset = *cooling_offsets[i];
                  float& prev_error = *cooling_prev_errors[i];
                  
                  float calculated_flow = offset - (actual_outside_temp - 20.0f) * id(cooling_slope).state;
                  if (calculated_flow > id(cooling_smart_start_temp).state) {
                    calculated_flow = id(cooling_smart_start_temp).state;
                    ESP_LOGD("auto_adaptive", "Z%d COOLING: Using Smart Start Temp of %.1f°C", (i + 1), calculated_flow);
                  }
                  if (calculated_flow < id(minimum_cooling_flow_temp).state) {
                    calculated_flow = id(minimum_cooling_flow_temp).state;
                    ESP_LOGW("auto_adaptive", "Z%d COOLING: Flow limited to %.1f°C (Condensation Limit)", (i + 1), calculated_flow);
                  }
                    
                  bool is_saturated = (actual_flow_temp - requested_flow_temp) > SATURATION_MARGIN;
                  if (is_saturated) {
                      ESP_LOGW("auto_adaptive", "Z%d COOLING: HP Saturated (Req: %.1f, Act: %.1f). Learning paused.", (i + 1), requested_flow_temp, actual_flow_temp);
                  } else {
                    float error = room_temp - room_target_temp;
                    if (error > error_margin_positive && error >= prev_error) {
                      float old_offset = offset;
                      offset -= learning_rate;
                      ESP_LOGI("auto_adaptive", "Z%d COOLING: Room too warm (err: %.2f). Offset decreased from %.2f to %.2f", (i + 1), error, old_offset, offset);
                    } else if (error < error_margin_negative) {
                      float old_offset = offset;
                      offset += learning_rate;
                      ESP_LOGI("auto_adaptive", "Z%d COOLING: Room too cold (err: %.2f). Offset increased from %.2f to %.2f", (i + 1), error, old_offset, offset);
                    }
                    prev_error = error;
                  }
                  
                  calculated_flows_cool[i] = round(calculated_flow * 2) / 2.0f;
              }
          }

          bool is_heating_demand = calculated_flows_heat[0] > 0.0f || calculated_flows_heat[1] > 0.0f;
          bool is_cooling_demand = calculated_flows_cool[0] < 100.0f || calculated_flows_cool[1] < 100.0f;

          if (status.has_independent_z2()) {
              if (is_heating_demand) {
                  if (status.is_auto_adaptive_heating(esphome::ecodan::Zone::ZONE_1)) {
                    ESP_LOGD("auto_adaptive", "CMD: Set Z1 Heat Flow -> %.1f°C", calculated_flows_heat[0]);
                    id(ecodan_instance).set_flow_target_temperature(calculated_flows_heat[0], esphome::ecodan::Zone::ZONE_1);
                  }
                  if (status.is_auto_adaptive_heating(esphome::ecodan::Zone::ZONE_2)) {
                    ESP_LOGD("auto_adaptive", "CMD: Set Z2 Heat Flow -> %.1f°C", calculated_flows_heat[1]);
                    id(ecodan_instance).set_flow_target_temperature(calculated_flows_heat[1], esphome::ecodan::Zone::ZONE_2);
                  }
              } else if (is_cooling_demand) {
                  if (status.is_auto_adaptive_cooling(esphome::ecodan::Zone::ZONE_1)) {
                    ESP_LOGD("auto_adaptive", "CMD: Set Z1 Cool Flow -> %.1f°C", calculated_flows_cool[0]);
                    id(ecodan_instance).set_flow_target_temperature(calculated_flows_cool[0], esphome::ecodan::Zone::ZONE_1);
                  }
                  if (status.is_auto_adaptive_cooling(esphome::ecodan::Zone::ZONE_2)) {
                    ESP_LOGD("auto_adaptive", "CMD: Set Z2 Cool Flow -> %.1f°C", calculated_flows_cool[1]);
                    id(ecodan_instance).set_flow_target_temperature(calculated_flows_cool[1], esphome::ecodan::Zone::ZONE_2);
                  }
              }
          } else {
              if (is_heating_demand) {
                  float final_flow = fmax(calculated_flows_heat[0], calculated_flows_heat[1]);
                  ESP_LOGD("auto_adaptive", "CMD: Set Dependent Heat Flow -> %.1f°C (max of Z1:%.1f, Z2:%.1f)", final_flow, calculated_flows_heat[0], calculated_flows_heat[1]);
                  id(ecodan_instance).set_flow_target_temperature(final_flow, esphome::ecodan::Zone::ZONE_1);
              } else if (is_cooling_demand) {
                  float final_flow = fmin(calculated_flows_cool[0], calculated_flows_cool[1]);
                  ESP_LOGD("auto_adaptive", "CMD: Set Dependent Cool Flow -> %.1f°C (min of Z1:%.1f, Z2:%.1f)", final_flow, calculated_flows_cool[0], calculated_flows_cool[1]);
                  id(ecodan_instance).set_flow_target_temperature(final_flow, esphome::ecodan::Zone::ZONE_1);
              }
          }