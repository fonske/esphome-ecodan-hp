substitutions:
  zone_identifier_z1: "0"

binary_sensor:
  - platform: ecodan
    status_prohibit_heating_z1:
      id: status_prohibit_heating_z1
      name: ${status_prohibit_heating_z1}
    status_prohibit_cool_z1:
      id: status_prohibit_cool_z1
      name: ${status_prohibit_cool_z1}
    status_water_pump_2:
      id: status_water_pump_2
      name: ${status_water_pump_2}

climate:
  - platform: ecodan
    heatpump_climate_z1:
      name: ${heatpump_climate_z1}
      id: heatpump_climate_z1
      zone_identifier: ${zone_identifier_z1}
      get_status_func: |-
        return id(ecodan_instance).get_status();
      get_target_temp_func: |-
        auto& status = id(ecodan_instance).get_status();
        return status.Zone1FlowTemperatureSetPoint;
      target_temp_func: |-
        id(ecodan_instance).set_flow_target_temperature(x, esphome::ecodan::Zone::ZONE_1);
      current_temp_func: |-
        auto& status = id(ecodan_instance).get_status();
        return status.Zone1FlowTemperatureSetPoint;
    heatpump_climate_room_z1:
      name: ${heatpump_climate_room_z1}
      id: heatpump_climate_room_z1
      thermostat_climate_mode: true
      zone_identifier: ${zone_identifier_z1}
      get_status_func: |-
        return id(ecodan_instance).get_status();
      get_target_temp_func: |-
        auto& status = id(ecodan_instance).get_status();
        return status.Zone1SetTemperature;
      target_temp_func: |-
        id(ecodan_instance).set_room_temperature(x, esphome::ecodan::Zone::ZONE_1);
      current_temp_func: |-
        auto& status = id(ecodan_instance).get_status();
        return status.Zone1RoomTemperature;

sensor:
  - platform: ecodan
    z1_flow_temp_target:
      id: z1_flow_temp_target
      name: ${z1_flow_temp_target}
    z1_room_temp:
      id: z1_room_temp
      name: ${z1_room_temp}      
    z1_room_temp_target:
      id: z1_room_temp_target
      name: ${z1_room_temp_target}
    z1_feed_temp:
      id: z1_feed_temp
      name: ${z1_feed_temp}
    z1_return_temp:
      id: z1_return_temp
      name: ${z1_return_temp}

    status_heating_cooling:
      id: status_heating_cooling
      name: H/C status
      internal: true
      on_value:
        if:
          condition:
            - lambda: |-
                auto mode = static_cast<uint8_t>(id(ecodan_instance).get_status().HeatingCoolingMode);
                auto index = id(heatpump_select_operating_mode).active_index();
                return (index.has_value() && index.value() != mode);
          then:
            - select.set_index:
                id: heatpump_select_operating_mode
                index: !lambda "return static_cast<uint8_t>(id(ecodan_instance).get_status().HeatingCoolingMode);"

select:
  - platform: template
    name: ${heatpump_select_operating_mode}
    id: heatpump_select_operating_mode
    optimistic: true
    restore_value: true
    options:
      - ${heat_target_temperature}
      - ${heat_flow_temperature}
      - ${heat_compensation_curve}
      - ${cool_target_temperature}
      - ${cool_flow_temperature}
      - ${floor_dry_up}
      - ${cool_compensation_curve}
    set_action:
      - lambda: |-
          auto index = id(heatpump_select_operating_mode).index_of(x);
          auto active_index = id(heatpump_select_operating_mode).active_index();
          if (index.has_value() && index.value() != active_index.value()) {
            id(ecodan_instance).set_hp_mode(static_cast<uint8_t>(index.value()), esphome::ecodan::Zone::ZONE_1);
          }
